<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <link href="../style.css" rel="stylesheet" type="text/css"/>
        <title>
            The Rugged Handbook
        </title>
        <!--include googleAnalyticsScript.txt -->
    </head>

    <body>
<!--include menu.txt -->
        <h1>
            The Rugged Handbook
        </h1>
        <p class="author">
             Josh Corman, David Rice, and Jeff Williams
        </p>
        <p>
            Reviewers: Arun John Kuruvilla
        </p>
        <p>
            Helpful links: 
            <a href="https://www.ruggedsoftware.org/wp-content/uploads/2013/11/Rugged-Handbook-v7.pdf"> Rugged Handbook (Strawman) v7 (pdf)</a>
            <br/>
            <a href="https://www.ruggedsoftware.org/wp-content/uploads/2013/11/Rugged-Implementation-Guide-v4.pdf">Rugged Implementation Guide v4 (pdf)</a>
        </p>

        <h4>Introduction</h4>

        <p>
            "Rugged" is a frame of mind which is used by organizations to 
            create stable and secure code that anticipates future threats 
            and vulnerabilites. By staying ahead of threats in time, a rugged 
            mindset reduces cost and increases savings for the organization in 
            the long run. Rugged organizations produce rugged applications 
            that is easily maintainable, understandable, and secure. These 
            applications can self analyze, detect attacks, and also respond to 
            events according to their severity.
        </p>

        <p>
            Software plays an important role in our day to day lives, such 
            as monitor our health, our finances and so on. With the increases 
            reliance on software, it becomes even more paramont that these 
            softwares and applications can take a hit and survive without 
            causing damages to humans. Compared to nature, which incorporates 
            ruggedness, human developed objects are quite fragile. The book 
            provides several examples taken from nature which can be used by 
            software engineering organizations to structure their teams and 
            give rugged output.
        </p>

        <h4>Getting Rugged</h4>

        <p>
            The author speaks about drawing parallels from nature when getting 
            rugged. Prairie dogs are good examples of monitoring threats that 
            are faced by an application. Ant colonies demonstrate the benifits 
            of working together. Defenses against common threats should be 
            unified like musk oxen. The various libraries and components used 
            by an application should be controlled similar to how a family of 
            beavers control their environment. Several other parallels are 
            explained in this chapter.
        </p>

        <h4>Telling the Security Story</h4>

        <h4>Rugged Roles</h4>

        <p>
            While roles and responsibilities are different for each 
            organization, this chapter tries to understand what these roles 
            perform and how ruggedness can be incorporated into them. These 
            roles might be labelled differently for one organization or might 
            not even exist for another. Several metrics are also provided 
            which helps monitor how well a particuler role is performing with 
            respect to ruggedness.
        </p>

        <h5>The Rugged Executive</h5>

        <p>
            A rugged executive's role is to express the organizations concerns 
            and to explain its security story. Several steps can be taken 
            towards this direction and are mentioned in this chapter.
        </p>

        <h5>The Rugged Security Analyst</h5>

        <p>
            The role of a rugged Security analyst and the various scopes of 
            information and insights needed by such a role are mentioned in 
            this sub-chapter. 
        </p>

        <h5>The Rugged Architect</h5>

        <p>
            This subsection mentions some of the points that a rugged 
            architect has to keep in mind while designing a system so that 
            it will meet the expected threats. The architect's role is to 
            set up defenses so that the application stays strong against 
            resent as well as future threats.
        </p>

        <h5>The Rugged Project Manager</h5>

        <p>
            The responsibilites of a rugged project manager includes 
            understanding enough of the security architecture and managing the 
            project and team to deliver a rugged application. Several of these 
            responsibilities are mentioned in this sub-section.
        </p>

        <h5>The Rugged Developer</h5>

        <p>
            Getting rugged eventually boils down to the developer. The 
            developer is the role that implements the entire security 
            architecture and gets data and statistics for other roles to 
            monitor the health of the system. This subsection explains the 
            responsibilities of that role. 
        </p>

        <h5>The Rugged Tester</h5>

        <p>
            This is the role that monitors the application and keeps the 
            application and organization updated against current threats and 
            future ones. The various responsibilities of the rugged tester are 
            explained here.
        </p>

        <h4>Getting started with Rugged</h4>

        <p>
            This chapter gives suggestions on how an organization can get 
            started at being rugged and in turn make thier applications and 
            services also rugged. The suggestions explain how various roles 
            can look into the organization as their whole and make their 
            organization resistant to current as well as future threats.
        </p>

        <h4>Proving that you are Rugged</h4>

        <p>
            This chapter talks about the various indicators that a rugged 
            application has that can prove that it is regged. Some of the 
            indicators can also be used by the organization to prove that 
            the applications and software that they produce are rugged. 
            Several scoring criteria that can be used to score an organization 
            or application's security story are mentioned.
        </p>

        <h4>Supporting Tools and Technology</h4>

        <p>
            the author talks about some of the technlogies that can be used by 
            an organization to becaome rugged. While a rugged mindset does not 
            require the use of any particular set of tools, the author 
            recommends some that he feels will help.
        </p>

        <h4>How Rugged fits</h4>

        <h4>Case Studies</h4>

    </body>
</html>
