<!DOCTYPE html>
<html>
<!-- THIS FILE WAS GENERATED BY A SCRIPT: DO NOT EDIT IT! -->
    <head>
        <meta charset="UTF-8">
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
        <link rel="stylesheet" href="../style.css">

        <!-- jQuery CDN -->
         <script src="https://code.jquery.com/jquery-1.12.0.min.js"></script>
         <!-- Bootstrap Js CDN -->
         <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>

         <script type="text/javascript">
             var status = 'on';
             $(document).ready(function () {
                 $('#sidebarCollapse').on('click', function () {
                     $('#sidebar').toggleClass('active');
                     if (status == 'on') {
                         $('#sidebarText').text("Expand Side Nav");
                         status = 'off';
                     } else {
                         $('#sidebarText').text("Collapse Side Nav");
                         status = 'on';
                     }
                 });
             });
         </script>
        <title>
            Web Application Insecurity
        </title>
<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-114841175-1"></script>
<script>
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    gtag('js', new Date());
    gtag('config', 'UA-114841175-1');
</script>
    </head>

    <body>
        <div class="wrapper">
<!-- Sidebar Holder -->
<nav id="sidebar">
    <div id="sidebarCollapse">
        <div class="sidebar-header">
            <h1>DevOps</h1>
            <strong>DO</strong>
        </div>
    </div>

    <ul class="list-unstyled components">
        <li>
            <a href="https://gcallah.github.io/DevOps/index.html">
                <i class="glyphicon glyphicon-home"></i>
                Home
            </a>
        </li>
        <li>
            <a href="#pageSubmenu" data-toggle="collapse" aria-expanded="false">
                <i class="glyphicon glyphicon-duplicate"></i>
                Main Areas of Coverage
            </a>
            <ul class="collapse list-unstyled" id="pageSubmenu">
                <li>
                  <a href="#BuildSubmenu" data-toggle="collapse" aria-expanded="false">Build</a>
                  <ul class="collapse list-unstyled" id="BuildSubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/build/links.html">Build links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/build/theory.html">Build theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/build/tools.html">Build tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/build/implementation.html">Our build implementation</a></li>
                  </ul>
                </li>
                <li>
                  <a href="#CloudSubmenu" data-toggle="collapse" aria-expanded="false">Cloud</a>
                  <ul class="collapse list-unstyled" id="CloudSubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/cloud/links.html">Cloud links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/cloud/theory.html">Cloud theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/cloud/tools.html">Cloud tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/cloud/implementation.html">Our cloud implementation</a></li>
                  </ul>
                </li>
                <li>
                  <a href="#CodingSubmenu" data-toggle="collapse" aria-expanded="false">Coding: Lean and Agile Practices</a>
                  <ul class="collapse list-unstyled" id="CodingSubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/coding/links.html">Coding links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/coding/theory.html">Coding theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/coding/tools.html">Coding tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/coding/implementation.html">Our coding implementation</a></li>
                  </ul>
                </li>
                <li>
                  <a href="#DeploySubmenu" data-toggle="collapse" aria-expanded="false">Deployment</a>
                  <ul class="collapse list-unstyled" id="DeploySubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/deployment/links.html">Deployment links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/deployment/theory.html">Deployment theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/deployment/tools.html">Deployment tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/deployment/implementation.html">Our deployment implementation</a></li>
                  </ul>
                </li>
                <li>
                  <a href="#MonitorSubmenu" data-toggle="collapse" aria-expanded="false">Monitoring</a>
                  <ul class="collapse list-unstyled" id="MonitorSubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/monitoring/links.html">Monitoring links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/monitoring/theory.html">Monitoring theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/monitoring/tools.html">Monitoring tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/monitoring/implementation.html">Our monitoring implementation </a></li>
                  </ul>
                </li>
                <li>
                  <a href="#SecuritySubmenu" data-toggle="collapse" aria-expanded="false">Security: Rugged DevOps</a>
                  <ul class="collapse list-unstyled" id="SecuritySubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/security/links.html">Security links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/security/theory.html">Security theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/security/tools.html">Security tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/security/implementation.html">Our security implementation</a></li>
                  </ul>
                </li>
                <li>
                  <a href="#TestingSubmenu" data-toggle="collapse" aria-expanded="false">Testing</a>
                  <ul class="collapse list-unstyled" id="TestingSubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/testing/links.html">Testing links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/testing/theory.html">Testing theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/testing/tools.html">Testing tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/testing/implementation.html">Our testing implementation</a></li>
                  </ul>
                </li>
                <li>
                  <a href="#WorkflowSubmenu" data-toggle="collapse" aria-expanded="false">Workflow: DevOps as a Way of Work</a>
                  <ul class="collapse list-unstyled" id="WorkflowSubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/workflow/links.html">Workflow links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/workflow/theory.html">Workflow theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/workflow/tools.html">Workflow tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/workflow/implementation.html">Our workflow implementation</a></li>
                  </ul>
                </li>
                <li>
                  <a href="#UXSubmenu" data-toggle="collapse" aria-expanded="false">UX: User Interface</a>
                  <ul class="collapse list-unstyled" id="UXSubmenu">
                    <li><a href="https://gcallah.github.io/DevOps/UX/links.html">UX links</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/UX/theory.html">UX theory</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/UX/tools.html">UX tools</a></li>
                    <li><a href="https://gcallah.github.io/DevOps/UX/implementation.html">Our UX implementation</a></li>
                  </ul>
                </li>
            </ul>
        </li>
        <li>
            <a href="#MaterialsSubmenu" data-toggle="collapse" aria-expanded="false">
                <i class="glyphicon glyphicon-link"></i>
                Other Materials
            </a>
            <ul class="collapse list-unstyled" id="MaterialsSubmenu">
              <li>
                <a href="#CMSubmenu" data-toggle="collapse" aria-expanded="false">Course-specific Material</a>
                <ul class="collapse list-unstyled" id="CMSubmenu">
                  <li><a href="https://gcallah.github.io/DevOps/courseDescr.html">Course description, Spring 2018</a></li>
                  <li><a href="https://gcallah.github.io/DevOps/courseExpectations.html">Course expectations, Spring 2018</a></li>
                  <li><a href="https://gcallah.github.io/DevOps/TeamsTable.html">Our teams for Spring 2018</a></li>
                  <li><a href="https://gcallah.github.io/DevOps/books.html">DevOps reading list</a></li>
                  <li><a href="https://gcallah.github.io/DevOps/journals/index.html">Our DevOps journals</a></li>
                  <li>
                  <a href="http://www.thedevopscourse.com/quiz/">Our Django
                  site: we are creating a quiz system here.</a>
                  </li>
                </ul>
              </li>
              <li>
                <a href="#SupSubmenu" data-toggle="collapse" aria-expanded="false">Supplementary Material</a>
                <ul class="collapse list-unstyled" id="SupSubmenu">
                  <li><a href="https://gcallah.github.io/DevOps/websites.html">DevOps websites</a></li>
                </ul>
              </li>
            </ul>
        </li>
        <li>
            <a href="https://gcallah.github.io/DevOps/about.html">
                <i class="glyphicon glyphicon-briefcase"></i>
                About
            </a>
        </li>
    </ul>
</nav>

            <div id="content">
            <p class="author">
                Author: Dafydd Stuttard & Marcus Pinto <br>
                Reviewer(s): OM NARAYAN, JAYESH MHATRE
            </p>
             <p>
            Helpful links: <a href="https://leaksource.files.wordpress.com/2014/08/the-web-application-hackers-handbook.pdf"> Course&Book</a>
            </p>

<h4>Chapter 1: Web Application (In)security </h4>
         
           <p>

            Web-based application security has become an essential element for almost every web application developed today reason being they are the favorite targets among attackers. For all concerned, the stakes are high: for businesses that derive increasing revenue from Internet commerce, for users who trust web applications with sensitive information, and for criminals who can make big money by stealing payment details or compromising bank accounts. Reputation plays a critical role. Few people want to do business with an insecure website, so few organizations want to disclose details about their own security vulnerabilities or breaches. Hence, it is not a trivial task to obtain reliable information about the state of web application security today.

          </p>
          
           <p>
            Book is essentially splitted in  three sections:
            <ul>
                <li>
                    <b>Vulnerability</b> - XSS,CSRF,Dos.
                </li>
                <li>
                    <b>Attacks</b> - Tools based- Burpsuite,
                </li>
                <li>
                    <b>Mitigation Techniques</b> - Input Sanitization, Firewalls,IDS,IPS.
                </li>
            </ul>
        </p> 

   <h4>Chapter 2: Core Defense Mechanisms</h4>

        <p>
           This chapter deals with a various defense mechanism that can be applied in a web application. Since, the fundamental security problem with web applications — that all user input is untrusted — gives rise to a number of security mechanisms that applications use to defend themselves against attack. Virtually all applications employ mechanisms that are conceptually similar, although the details of the design and the effectiveness of the implementation vary greatly. The defense mechanisms employed by web applications comprise the following core elements:
           <ul>
                <li>
                  Handling user access to the application’s data and functionality to prevent users from gaining unauthorized access.
                </li>
                <li>
                Handling user input to the application’s functions to prevent malformed input from causing undesirable behavior.
                </li>
                <li>
               Managing the application itself by enabling administrators to monitor its activities and confi gure its functionality.
                </li>
           </ul>
        </p> 

   <h4>Chapter 3: Web Application Technologies</h4>
          <p>
            The chapter includes a myriad of web application technologies used across the world. It deals primarily with the underlying protocols and various methods supported in it -post, get, head, delete to name a few. The chapter covers support of various web application frameworks along with language support for each of them.
           </p>
           
     <h4>Chapter 4: Mapping the Application</h4>
      <p>
           This chapter describes the first exercise you need to perform when targeting a new application — gathering as much information as possible to map its attack surface and formulate your plan of attack. This process includes exploring and probing the application to catalog all its content and functionality, identifying all the entry points for user input, and discovering the technologies in use.
      </p>
      
      <h4>Chapter 5: Bypassing Client-Side Controls</h4>
                <p>
                This chapter covers the first area of actual vulnerability, which arises when an application relies on controls implemented on the client side for its security. This approach normally is flawed, because any client-side controls can, of course, be circumvented. The two main ways in which applications make themselves vulnerable are by transmitting data via the client on the assumption that it will not be modified, and by relying on client-side checks on user input. This chapter describes a range of interesting technologies, including lightweight controls implemented within HTML, HTTP, and JavaScript, and more heavyweight controls using Java applets, ActiveX controls, Silverlight, and Flash objects.
               </p>

       <h4>Chapter 6: Attacking Authentication</h4>     
                <p>
                   This chapter first describes various authentication mechanism like HTML forms-based authentication, Multifactor mechanisms, such as those combining passwords and physical, Client SSL certificates and/or smart cards, HTTP basic and digest authentication, Windows-integrated authentication using NTLM or Kerberos, Authentication services. Further, it explains the various flaws in Authentication mechanism.
                   <ul>
                      <li> Bad Passwords </li>
                      <li> Brute-Forcible Login </li>
                      <li> Verbose Failure Messages </li>
                      <li> Vulnerable Transmission of Credentials </li>
                      <li> Password Change Functionality </li>
                      <li> Forgotten Password Functionality </li>
                      <li> User Impersonation Functionality </li>
                      <li> Incomplete Validation of Credentials </li>
                      <li> Nonunique Usernames </li>
                    </ul>
                </p>

        <h4>Chapter 7: Attacking Session Management </h4>  
          <p>
                “Attacking Session Management,” examines the mechanism by which most applications supplement the stateless HTTP protocol with the concept of different requests. This mechanism is a key target when you are attacking a web application because if you can break it, you can effectively bypass the login and masquerade as other users without knowing their credentials.           
      </p>
       <h4>Chapter 8: Attacking Access Controls </h4>  
          <p>
                This chapter deals with categories of access controls which can be implemented in Web Based Application and how such access control can be vulnerable and exploited and further provides solution to mitigate such attacks.
                These are some of the access control mechanism which can be exploited if it is not implemented securely.
               <ul>
                      <li>Completely Unprotected Functionality</li>
                      <li>Direct Access to Methods</li>
                      <li>Identifier-Based Functions</li>
                      <li>Platform Misconfiguration</li>
                </ul>   
               <h1> Below are the various defense mechanism which can be deployed to mitigate potential attacks.</h1>
                <ul>
                   <li> Using central application to check user access control.</li>
                   <li> Driving access control decision from user's session.</li>
                   <li> A multilayer priviledged model.</li>
                   <li>Role based access control</li>
                </ul>
      </p>

            <h4>Chapter 9 and 10: Attacking Datastores and Back-End components </h4>  
          <p>
            This chapter discusses potential attack surface with datastores like SQL databases,XML-Based repositories,LDAP
            directories, and servies like SOAP and SMTP. The vulnerability in web application can allow to perform sql-injection,injection in xml also known as xpath injection, LDAP injection which can reveal insensitive data. There are numerous approaches to mitigate these attacks and the most important and generic one is to sanitize user input and place a validation mechanism both on client and server.
          </p>

           <h4>Chapter 11:  Attacking Application Logic </h4>  
          
          <p>
          This chapter deals with various application logic flaws which can be exploited to gain unathorise access. Missing null
          checks, failing to check size of input, improper exception and error handling can be categorise as application logic flaw.
          Sometimes inherent assumption can led to a logical or functional flaw. Chapter states few secure coding practice but
          that can't be considerd as silver bullet to mitigate. Few of the secure coding practice are.
             <ul>

                    <li>Ensuring application’s design to be clearly documented in sufficient detail for an outsider to understand every assumption the designer made. </li>
                    <li>Mandating all source code to be clearly commented to be readble and easily understandable for any person. </li>

             </ul>
        </p>

         <h4> Chapter 12: Attacking Users: Cross-Site Scripting </h4>  
         <p>
         This chapter discusses the most prevalent attack in web applications. These attacks are featured as the top 10 OWASP vulnerability in Web Server.
         It explains about XSS and its various types in details and mitigation techniques for each of them. Below are the various types of XSS.
      <ul>
         <li>Stored XSS</li>
         <li>Reflected XSS</li>
         <li>DOM-based XSS</li>
         <li>Cross Site Request Forgery</li>
      </ul>
           It mentions various mitigation techniques but again there is no silver bullet. The best practices to mitigate these potential attacks are.
           <ul>
             <li> Input Sanitization and Validation</li>
             <li> Implementing Web Application Firewalls</li>
             <li> Client side input encoding</li>
             <li> Whitelisting User Input Characters.</li>
           </ul>       
          </p>
      
      <h4> Chapter 13: Attacking Users: Other Techniques </h4>  
         <p>
         This chapter deals with other types of techniques followed by hackers to destroy a web application. The author explains each of the
         technique in-depth and also discusses the precautions to be taken for mitigating the risk.
     For example:
      <ul>
         <li>UI Redress</li>
         <li>Capturing data cross-domain</li>
         <li>HTTP header injection</li>
         <li>Session fixation</li>
     <li>Client-side SQL Injection</li>
     <li>Open redirection</li>
      </ul>
        The chapter also covers the implementation of such attacks on different browser extensions and the changes brought by HTML5. The
        chapter concludes with explanation on attacks that do not depend on the vulnerabilities of any web application, but the ones that
        can be delivered by other user(attacker) or any other malicious/compromised website.    
          </p>
	<h4> Chapter 14: Automating Customized Attacks </h4>  
         <p>
         This chapter talks about the hurdles in automation and how we can overcome them.
	Most of the applications make use of session-handling mechanisms that terminate
         compromised sessions.This chapter deals with customized attacks, how we can tailor the attack to application's behavior.
       Situations in which customized automation techniques can be employed:
      <ul>
         <li>Enumerating identifiers</li>
         <li>Harvesting data</li>
         <li>Web application fuzzing</li>
      </ul>
           The author also describes how to automate the attacks and make them more faster, easier 
		   and effective and thus overcome the laborious manual attacks. The chapter concludes with           explaining the vulnerabilities in CAPTCHA control and tools and techniques to mitigate them.    
          </p>
	<h4> Chapter 15: Exploiting Information Disclosure </h4>  
         <p>
         As the name suggests, this chapter examines different ways in which an application 
		 leaks information when attacked. The author describes how we should monitor the application 
		 to get further sources of information disclosure by using the attacks explained in this book.
		 The chapter explains how we can get a deeper understanding of the application behavior and 
		 functioning by exploiting information disclosure.
		 Different types of sources to get information:
      <ul>
         <li>Script error messages</li>
         <li>Stack traces</li>
         <li>Informative debug messages</li>
         <li>Server and database messages</li>
	<li>Enginnering informative error messages</li>
      </ul>
           There are new sections in this book that gives detailed explanation on XSS in error messages.      
          </p>
		<h4> Chapter 19: Attacking the Application Server </h4>  
         <p>
               This chapter deals with attacking the web-server and application server rather than attacking application. It intially enumerates
               possible attack avenues from server infrastrcture standpoint and then provides mitigation techniques for each of them. They are
               broadly categorised as below.

              <ul>
                 <li>Vulnerable Server Configuration</li> 
                 <ul>
                   <li>Default Credentials.</li>
                   <li>Default Content.</li>
                   <li>Debug Functionality.</li> 
                   <li>Directory Listings.</li>
                   <li>The Application Server as a Proxy.</li>
                   <li>Misconfigured Virtual Hosting. </li>
                 </ul>
                 <li>Securing Web Server Configuration</li>
                    <ul>
                       <li>Changing default credentials and removing any unrequired default accounts.</li>
                       <li>Blocking public access to administrative interfaces by ACLs on the required paths within root or by restrciting access to nonstandard ports.</li>
                       <li>Removing unnecessary default content and functionality. Tools like Nikto can be used as secondary check to ensure cleanup.</li>
                       <li>Disable directory listing whereever possible.</li>
                       <li> Disbaling all other methods than GET and POST.</li>
                       <li>Ensure Webserver is not configured as a proxy and if is harden its security to allow connections only to legitimate host and port.</li>
                       <li>If web server supports virtual hosting,security hardening applied must be enforced on the default host.</li>
                     </ul>
                 <li>Vulnerable Server Software</li>
                    <ul>
                     <li>Application Framework Flaws.</li>
                     <li>Memory Management Vulnerabilities.</li>
                     <li>Encoding and Canonicalization.</li>
                   </ul>
                   <li>Securing Web Server Software</li>
                    <ul>
                      <li>Choosing Software with a Good Track Record.</li>
                      <li>Readily applying vendor patches.</li>
                      <li>Performing Security Hardening.</li>
                      <li>Using defense-in-depth strategy.</li>
                      <li>Enforcing Web Application Firewall.</li>
                    </ul>
               </ul>     
             </p>
         </div>
          </div>
</body>
</html>
