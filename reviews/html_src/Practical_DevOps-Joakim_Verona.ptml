<!DOCTYPE html>
<html>
    <head>
        <!--include subhead.txt -->
        <title>
            Review of Practical DevOps - Joakim Verona
        </title>
        <!--include googleAnalyticsScript.txt -->
    </head>

    <body>
      <div class="wrapper">
          <!--include navbar.txt -->
          <div id="content">
            <h1>
                Practical DevOps - Joakim Verona
            </h1>

            <p class="author">
                Reviewers: Kanishk Dugar and Pravar Singh<br/>

                <h2>Chapter 1  - Introduction to DevOps and Continuous Delivery</h2>
                <br/>

                <p>
                  This chapter focuses on providing the big picture
                  understanding of the what Devops is , advantages of its
                  adoption &amp;and how to integrate it within the current
                  software development processes to maximize efficiency &amp;
                  accuracy. The author first sets the tone for the chapter by
                  emphasizing that implementing DevOps techniques doesn't only
                  require practical skills but soft skills as well.The foremost
                  important step in adopting DevOps is to be able to explain
                  your coworkers about what it is and its advantages &amp;to do
                  that ,having an in depth understanding yourself is
                  indispensable.
                </p>
                <p>
                  So, now lets get down to understanding what DevOps really is?
                  We have heard this term a million number of times,&amp; rather
                  think that it’s just a fancy term for automation but in
                  reality, it is much more than that. DevOps is much more of an
                  art rather than science, meaning there is no standard
                  guidelines set down but rather the implementation depends on
                  the particular scenario. DevOps is a practice which encourages
                  maximum amount of collaboration among the various software
                  disciplines such as Development teams, Q&amp;A teams and
                  Deployment teams.
                </p>
                <p>
                  The chapter gives the user insight into the origins of the
                  modern-day technique known as DevOps. The foundations were
                  laid down on the concepts and principles written down in The
                  Agile Manifesto, 2001 by a group of individuals who wanted to
                  change the status quo of software development drawing
                  conclusions from their several years of experience in the
                  industry. One of the major concepts jotted down in this
                  manifesto according to the author emphasizes the importance of
                  focusing on Individuals &amp; Interactions rather than on processes
                  &amp;tools which
                  basically means that company’s should invest not only in tools
                  and processes but rather also in breaking down the silos in
                  which various software disciplines work &amp;fostering a
                  culture of collaboration &amp;communication among them.
                  This problem can be seen to exist in a much more magnified
                  form in large companies.
                </p>
                <p>
                  One of the other major goals of DevOps is automation &amp;
                  continuous delivery. A well trained DevOps engineer will be
                  able to identify immediately existence of a workflow in a
                  process and know how to automate it.  Continuous Delivery aka
                  the principle of small batches focuses on releasing features
                  in small iterations incrementally rather than releasing the
                  whole product at once because it ensures that feedback is
                  received after each iteration, based on which teams could
                  alter their strategy by asking themselves whether they’re
                  building the right thing or not.
                </p>
                <p>
                  Next the author goes on to say that DevOps &amp;Continuous
                  Delivery are analogous &amp;cautions how easy it is to lose
                  track of the big picture while following DevOps implementations
                  by saying “Doing nothing faster is of no use to anyone”.  If
                  the teams are laying idle during the deploys for unnecessarily
                  long periods of times, this raises a red flag that something
                  is wrong with the process or tools. Idling of teams is
                  expensive to the company &amp;adds no business value. Hence
                  streamlining such processes is the need of the hour for such
                  situations.
                </p>
                <p>
                  Now having established an overall understanding of DevOps,
                  the author explains how DevOps is actually implemented and how
                  it fits into the various Agile Development cycles. He states
                  that the smaller the cycle is, the more visible &amp;
                  measurable the benefit of DevOps is. For eg. The teams
                  employing Kanban cycles (which last for 24 hours) which deploy
                  code manually are wasting days just on the deployment phase.
                  Here, having a CI/CD (Continuous Integration/ Continuous
                  Delivery) pipeline would drastically cut down the deployment
                  time to just a few minutes &amp; ensures that more time is
                  spent on development rather than deployment.
                </p>
                <p>
                  Now the author focuses on explaining the purpose behind
                  building deployment pipelines and not just wind up as
                  followers of the “cargo cults”- a term coined by Richard
                  Feynman in 1965 describing the behavior of cargo cults in the
                  Melanesian South Sea islands, as given in the book.
                </p>
                <p>
                  A very common problem faced quite often is that the output
                  from sprint retrospective - where the team gets together and
                  discusses what went well and what could have gone better
                  during the sprint , isn’t really acted upon &amp;an
                  opportunity to enforce potential improvements is missed out.
                  The cause of this problem is most of times the unfortunate
                  fact that identified problems were caused by some other part
                  of the organization that the team doesn’t communicate well
                  with. As you can probably guess by now, here the
                  implementation of DevOps approach can certainly benefit
                  since it emphasizes on cooperation between roles in an
                  organization.
                </p>

                <h2>Chapter 2  - A view from orbit</h2>
                <br/>
                <p>
                  In this chapter the author has described how the various
                  components of the Continuous Delivery pipeline work and
                  how they fit in together to form the bigger picture.
                  After that he also goes on to explain how the Continuous
                  Delivery pipeline fits into the Agile Development Cycles
                  such as Scrum and Kanban. At the end of the chapter he
                  emphasizes on how to identify the bottlenecks in the
                  deployment process and gives a baseline that if a change
                  being propagated doesn’t reach the integration test servers
                  within a 15 minute window, then there exists a problem in
                  your deployment pipeline which needs to be identified.
                  To support that,he gives an example of a real world practice
                  called Scrum Retrospective also. Everywhere in the chapter
                  he makes comparisons about the various variations that
                  occur with respect to the CD pipeline depending on the
                  company size.
                </p>

                <h2>Chapter 3 </h2>
                <p>
                  In this chapter the author explains how DevOps Principles affect architecture of a software, rather than just the deployment process, or in other words how the industry has accommodated DevOps practices into the current agile cycles In order for the architecture of the software to adhere to DevOps principles. One of the key take away concept from this chapter is the understanding of anti-pattern that promotes Monolithic Architectures which exists in legacy systems and significantly in current industry practices. The need to destroy this anti-pattern and promote modular systems with high cohesion and low coupling is of utmost importance when looking from the DevOps point of view. To further substantiate this point, the author explains a concept called “Separation of Concerns”, coined by the famous Computer Scientist Dijkstra in his 1974 paper. The author makes the reader understand this concept with a very practical example that explains the problems faced in the monolithic scenario rather that the opposite. Further on he explains how the concept of “Separation of Concerns” has manifested itself in today’s software architectures in the form of “Three tier Systems” which comprise of Presentation, Logic and Data tier usually , allowing them to be managed independently. Next, he gives code snippets of Liquibase(a Database Migration System) files ,to explain how version control is applied on databases rather than just code, which really helps the reader to get hands-on experience with Database Migration Management and I found this section to be especially useful. Further, he talks about the microservices architectures being adopted today that further promotes the idea of “Separation of concerns” and avoids monolithic structures. I was very enlightened after reading this chapter and had never previously thought that DevOps could seep into the whole Software Development process so immensely.
                </p>

                <h2>Chapter 4 - Everything is code </h2>
                <p>
                  Every software based organization needs a central code
                  management system and this chapter discusses the strategies
                  for selecting a suitable system and various practices
                  associated with it. TBC..
                </p>



            </p>
          </div>
      </div>
    </body>
</html>
