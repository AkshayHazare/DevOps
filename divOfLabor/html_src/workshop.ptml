<!DOCTYPE html>
<html>
    <head>
<!--include subhead.txt -->
        <title>
            Staffing Your DevOps Organization: Agile Development and
            the Division of Labor
        </title>
        <!--include googleAnalyticsScript.txt -->
    </head>

    <body>
        <figure class="top-fig">
            <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Gepardjagt1_%28Acinonyx_jubatus%29.jpg/640px-Gepardjagt1_%28Acinonyx_jubatus%29.jpg"
                width="22%">
            <figcaption>
            </figcaption>
        </figure>

        <h1 class="no-menu">
            Staffing Your DevOps Organization: Agile Development and
            the Division of Labor
        </h1>

        <details>
            <summary class="sum1a">
                The extreme division of labor during much of
                the 20<sup>th</sup> century was a temporary thing.
            </summary>

            <figure>
                <img src="https://upload.wikimedia.org/wikipedia/commons/2/29/Ford_assembly_line_-_1913.jpg"
                width="25%">
                <figcaption>
                    Ford assembly line, 1913
                </figcaption>
            </figure>

            <ul class="present">
                <li>
                    Workers were <i>discouraged</i> from thinking about the
                    overall production process.
                </li>
                <li>
                    "Keep your head down and do your own job."
                </li>
                <li>
                    Humans were, in essence, turned into machines on the
                    assembly line.
                </li>
            </ul>
        </details>

        <details>
            <summary class="sum1a">
                The lure of central planning.
            </summary>

            <figure>
                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/DneproGES_1947.JPG/440px-DneproGES_1947.JPG"
                width="25%">
                <figcaption>
                    Soviet hydro-electric power plant
                </figcaption>
            </figure>
            <ul class="present">
                <li>
                    A form of "central planning" prevailed: a few expert
                    engineers/managers were the only ones who were supposed to
                    think about the entire process and product.
                </li>

                <li>
                    <b>Taylorism</b>:
                    "Taylorism was based on trying to replace the implicit
                    knowledge of the workmen with mass production methods
                    developed, planned, monitored, and controlled by managers.
                    'Under scientific management,' [Taylor] wrote, 'the
                    managers assume... the burden of gathering together all the
                    traditional knowledge which in the past has been possessed
                    by the workmen and then of classifying, tabulating, and
                    reducing this knowledge to rules, laws, formulae... Thus
                    all of the planning which under the old system was done by
                    the workmen, must of necessity under the new system be done
                    by management in accordance with the laws of science.' --
                    Jerry Muller, <i>The Tyranny of Metrics</i>, pp.32-33.
                </li>

                <li>
                    General Motors: "The managerial 'superstructure which
                    organizes and directs production... draws all possible
                    brainpower away from the shop; everything is centered in
                    the planning and schedule and design departments.'" --
                    Daniel Bell, quoted in Muller, p. 33
                </li>

                <li>
                    The waterfall model was an attempt to duplicate this
                    condition for software development: everything was centered
                    on the analysts: the coders just had to turn it into COBOL!
                </li>

                <li>
                    A problem with central planning:
                    F. A. Hayek's "Use of Knowledge in Society":
                    each person is an "expert" on their own particular
                    circumstances of time and place.
                </li>
            </ul>

        </details>

        <details>
            <summary class="sum1a">
                DevOps practices are a
                different way of working, based
                on the different demands of the 21<sup>st</sup>
                century.
            </summary>

            <figure>
                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/MorganWoodworking.jpg/440px-MorganWoodworking.jpg"
                width="25%">
                <figcaption>
                    A wood craftsperson
                </figcaption>
            </figure>

            <ul class="present">
                <li>
                    DevOps represents a reincarnation of "craft work."
                </li>
                <li>
                    A reincarnation, because it is craft work with a
                    new layer of automation available.
                </li>
                <li>
                    The expert craftsperson understands the roles of
                    the other experts with whom they interact.
                </li>
                <li>
                    "Get <i>all</i> workers deeply involved in analyzing
                    feedback from the market and rapidly figuring out how
                    to act on that feedback." -- Mary Poppendieck
                </li>
                <li>
                    Software-controlled machines can take the place of "human
                    machines."
                </li>
                <li>
                    People re-take their rightful place: rational animals.
                </li>
            </ul>

        </details>

        <details>
            <summary class="sum1a">
                What is the role of the "DevOps toolchain" in this
                new way of working?
            </summary>

            <figure>
                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/05/Devops-toolchain.svg/440px-Devops-toolchain.svg.png"
                width="22%">
                <figcaption>
                    The DevOps toolchain
                </figcaption>
            </figure>

            <ul class="present">
                <li>
                    The mechanical, repetitive tasks the assembly-line worker
                    performed in the 20th century must be automated! (And
                    automation <i>is</i> documentation!)
                </li>
                <li>
                    Testers cannot test successfully
                    unless they are part of the
                    production process from day one: thus, <i>continuous
                        testing</i>.
                </li>

                <li>
                     Operations cannot successfully deploy constantly evolving
                     products unless deployment itself becomes a software
                     product capable of swiftly evolving:
                     thus, <i>software as infrastructure</i>.
                </li>

                <li>
                    The "business" stakeholders in the product can't ensure
                    it is meeting business needs unless they
                    are continually engaged: thus
                    <i>continual interaction</i> between the engineers and the
                    "business people."
                </li>

                <li>
                    Why is "business" in scare quotes above?
                    <br />
                    "We are not developing software. We are doing something
                    larger and software is just part of the solution." -- Tom
                    Poppendieck
                </li>
                <li>
                    How new versions of a piece of software impact the end
                    users cannot be determined without <i>continual feedback</i>
                    from those users, thus:
                </li>
                <li>
                    <i>Incremental development</i>, which means
                    developers work on small batches and can easily change
                    course based on feedback;
                </li>
                <li>
                    <i>Continuous deployment</i>, allowing users to
                    comment on the work done in those small batches;
                    and
                </li>
                <li>
                    <i>Continuous monitoring</i>, so that problems using the
                    product become known right away.
                </li>
            </ul>

        </details>

        <details>
            <summary class="sum1a">
                How can we balance the need for 
                specialists with the DevOps demand to "break down silos"?
            </summary>

            <figure>
                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/41/Silos%2C_Acatlán%2C_Hidalgo%2C_México%2C_2013-10-11%2C_DD_02.JPG/600px-Silos%2C_Acatlán%2C_Hidalgo%2C_México%2C_2013-10-11%2C_DD_02.JPG"
                width="33%">
                <figcaption>
                </figcaption>
            </figure>

            <ul class="present">
                <li>
                    An agile enterprise needs to hire people with broad 
                    understanding of various technologies and
                    how they forward the goals of the enterprise.
                </li>

                <li>
                    Nevertheless, we still are coping with extremely complex
                    technologies, and we will need people who understand them
                    in great depth!
                </li>

                <li>
                    A story of the need for "generalizing specialists":
                    adding exchanges to a price feed.
                </li>
            </ul>

        </details>

    </body>
</html>
