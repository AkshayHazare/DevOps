<!DOCTYPE html>
<html>
    <head>
<!--include subhead.txt -->
        <title>
            Our Build Implementation
        </title>
        <!--include googleAnalyticsScript.txt -->
    </head>

    <body>

        <div class="wrapper">
<!--include navbar.txt -->
            <div id="content">
        <h1>
            Our Build Implementation
        </h1>


        <details>
            <summary class="sum2">
                Building and Git Submodules
            </summary>

            <p>
                We rely on git submodules in several areas of our
                <a href="https://gcallah.github.io/AgileCourseware/index.html">agile courseware</a>
                program.
                But this dependence can be tricky: while git supports
                submodules, it often does not seem to "like" doing so! Here we
                will write up some problems we've hit in that area.
            </p>

            <p>

            </p>

            <p>
                The first thing we are going to document is how to clone from a
                repository.
                We need to open our terminal and cd into the file we want to
                clone our repository in. Once we have done that
                we run the following command:<br/>
                <code>
                git clone https://github.com/gcallah/DevOps.git
                </code>
                <br/>
                (That last parameter is the clone string you get from the
                GitHub webpage shown below in the second screenshot.)
            </p>

            <figure>
            <img src="graphics/Clone.png" width ="90%">
            <figcaption>
                Screenshot - Cloning a Repository.
            </figcaption>
            </figure>
           <br/>
            <figure>
            <img src="graphics/GithubWebPage.png" width ="90%">
            <figcaption>
                Screenshot - Github Webpage.
            </figcaption>
            </figure>

            <p>
                If you need to add a submodule whether for first time or again,
                it is actually easier than some of the online document that
                suggest.For instance, to add TheDevOpsCourse to DevOps, you
                would just run:
            </p>

            <p>
                <code>
                git submodule add https://github.com/gcallah/TheDevOpsCourse.git
                </code>
                <br>
                (That last parameter is the clone string you get from the
                GitHub webpage.)
                <br>
            </p>

            <figure>
            <img src="graphics/AddSubModule.png" width ="90%">
            <figcaption>
                Screenshot - Adding a Submodule
            </figcaption>
            </figure>

            <p>
                Sometimes a submodule can be corrupted and will have to be
                removed. This process is difficult !
            </p>

            <figure>
            <img src="graphics/RemoveSubModule.png" width ="90%">
            <figcaption>
                Screenshot - Deleting a Submodule
            </figcaption>
            </figure>
        </details>

<!-- Our Build File Details -->

        <details>
            <summary class="sum2">
                Deep Dive Into Our Make File Workflow
            </summary>
            <details>
                <summary class="sum3">
                    Symbolic Link  
                </summary>  
                    <p>
                       Symbolic Link or Soft link is nothing but a file that 
                       points to another file. In our root directory we have
                       the submakefile and if we look closely at the makefile
                       inside each team directory (build,cloud,monitoring etc)
                       using commands:  
                       <code>ls -las</code>
                    </p>
                       <figure>
                        <img src="graphics/ls_las.png" width ="90%">
                        <figcaption>Running ls -las inside build team directory</figcaption>
                       </figure>
                    <p>
                       We see that makefile is referring to submakefile with
                       a pointer (makefile --&gt ../submakefile).
                    </p><br>
                    <p>
                       Following is the command to create a symbolic link:-<br>
                       <code>ln -s source_file destination_file</code><br>
                       In order to create a makefile to perform the build
                       process we will have to do the following in the main
                       directory:-<br>
                       <code>ln -s submakefile destination_file</code><br>
                       NOTE:- The destination_file should not be created in the
                       destination directory prior to running this command.
                       It will be created by itself when we run it.
                    </p>
                </details>
                <details>
                  <summary class="sum3">
                      Submakefile
                  </summary>
                      <p>
                        After taking a look at the Symbolic link we now know
                        that the makefile is referring to the submakefile. The
                        submakefile has the following contents:-
                      </p>
                      <figure>
                        <img src="graphics/submakefile.png" width ="90%">
                        <figcaption>Submakefile code</figcaption>
                      </figure>
                      <p>
                       In the first few lines of the code we have just 
                       initialized a few variables to make sure that we don't
                       repeat ourselves. On line 17 we run shell commands to
                       list files (ls) and stream edit them. ls first list all
                       the files present inside the html_src directory which
                       was initialized with PTML_DIR on line 7. Then we use a
                       stream editor on these files to convert from .ptml to 
                       .html file and then extracting out the html_src file
                       from it which would lead to placing it in the team 
                       directory.The test_html.sh has all
                       the code test required to run on our html files for 
                       example html checker, url checker, spell checker e.t.c.
                       The '%' sign acts as a wildcard (*) in a pattern.
                       $&lt is the first prerequisite, whereas $@ means
                       evaluate all.
                      </p>

                </details>
                <details>
                <summary class="sum3">
                  Test_html file
                </summary>
                     <p>
                      Test_html file is basically the file which consists of 
                      all the codes. This seperation is done to avoid
                      repeating ourselves since this code may be required by
                      different teams to perform their own testing.
                     </p>
                </details>
        </details>

<!-- How to implement the build process -->
        <details>
        <summary class="sum2">
            How to implement the build process
        </summary>
            <p>
                    Build tools control the building of a final product
                    from some number of pieces that compose that product.
                    The final product could be a web page, a compiled
                    executable, a piece of documentation, or a book.

                    Please Note that the following steps are only for
                    Linux, MacOS. 

                    Windows users, please have a look at the bottom of
                    the page.
                </p>

                <p>
                    The key characteristics of build tools are that:
                </p>

                <ul class="contents">
                    <li>
                        They automate the build process.
                    </li>
                    <li>
                        They re-build only what is necessary to re-build.
                    </li>
                    <li>
                        They document the build process.
                    </li>
                </ul>

                <h3>How to ‘make local’?</h3>
                    <p>
                    If you want to make changes to an html file, do not
                    directly edit it! Each directory(eg. cloud, testing...etc.)
                    has a html_src folder/dir. This html_src folder contains
                    .ptml files for all .html files. So, in order to edit
                    ‘abc.html’, we need to edit ‘abc.ptml’
                    </p>
                    <ul class="contents">
                    <li>
                    Step 1: navigate to required html_src folder
                    </li>
                    <li>
                    Step 2: edit ‘abc.ptml’ file
                    </li>
                    <li>
                    Step 3:<br>
                            <code>git add abc.ptml</code><br>
                            <code>git commit abc.ptml</code>
                    </li>
                    <li>
                    Step 4: <code>cd .. </code>(basically come to outer directory)
                    </li>
                    <li>
                    Step 5: Do you see a makefile? great! :blush:<br>
                            <code>make local</code>
                            </li>
                    <li>
                    Step 6: now check your abc.html file. It should have all
                    changes made to abc.ptml
                    </li>
                    <li>
                    Step 7: git add and git commit the abc.html file
                    </li>
                    <li>
                    Step 8: <br><code>git push</code>
                    </li>
                </ul>
            <br>
            <br>

            <ul class="contents">
                <li>
                <a href="http://gnuwin32.sourceforge.net/packages/make.htm">
                    Instruction for Make File on Windows.
                </a>                    
                </li>
            </ul>

        </details>

        <!-- Frequently asked build questions -->
        <details>
        <summary class="sum2">
            Frequently Asked Build Questions
        </summary>
        <details>
        <summary class="sum3">
            Why is that when I run make local, I get a message saying: <br>
            make: Nothing to be done for `local'.
        </summary>
            <p>
              The build tool make takes into consideration the timestamps of 
              ptml (pre-html) and the html. If our ptml is newer than the html
              files then the command make local will work. If you have been
              editing the html file and it has a timestamp newer than ptml then
              you are likely to see this error. One more possibility is when 
              you run make local on a file and without making any changes
              we run make local again. This means that both the
              timestamps are the same and our code will assume there is
              nothing to be done.
            </p>
        </details>
        <details>
        <summary class="sum3">
         How to install Command Line Tool on Mac OS X ?[1]
        </summary>
        <p>The steps listed below will guide you through the process of
           installing command line tool on Mac OS X</p>
            <ol type = "1" class="nested">
                <li> Launch terminal which can be found in /Applications/Utilities</li>
                <li> Type the following command:<br><br>
                    <code>xcode-select --install</code><br><br>
                    Terminal will display the following if you haven't
                    downloaded it before:<br><br>
                    <code> x-code select: note: install requested for command
                    line developer tools </code><br><br>
                    However if you have downloaded it before then you will get
                    the following message:<br><br>
                    <code> xcode-select: error: command line tools are already
                    installed, use "Software Update" to install updates</code>
                </li>
                <li> A simple software update pop up will prompt you to select
                     one of the three options.Options are Get Xcode, Not now
                     and Install. Get Xcode will install both Xcode and the
                     command line developer tools from the App Store. Not
                     now will quit the installation process. Install will lead
                     to installation of the command line tool once you have
                     accepted the "Terms of Service".</li>
                <li> The Command Line Tools package may take upto several
                     minutes to download based on your connection speed.</li>
                <li> The installer goes ahead smoothly and completes on its own
                    . You can confirm everything is working as expected by
                     trying out the commands like gcc, git, svn, rebase, make,
                     ld, otool, nm. </li>
                <li> The command line toolkit package can be found
                    in the following directory:<br><br>
                     <code>/Library/Developer/CommandLineTools/ </code></li>
            </ol>
        <p>
            Sources: 
            <a href="http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/">OSXDAILY</a>
        </p>
        </details>
        <details>
        <summary class="sum3">
            python 3
        </summary>
             <p>
             Put a symbolic link called ‘python3’ in the directory where you
             have python: now running ‘python3’ should work. *But* make sure it
             points to some python 3 version, and not 2.7.
             </p>
        </details>
        <details>
        <summary class="sum3">
            Problems with your git submodules
        </summary>
        <!-- Add content here -->
        <p>
            Make sure you have the all the contents pulled from the submodule 
            if build fails. In order to do this follow the steps shown below
            once you are in the main DevOps directory. <br>
            <code>
                git sobmodule update
            </code>
            <br>
            Alternatively we can also do the following: -<br>
            <code>cd utils</code><br>
            <code>git pull origin master</code>
        </p>
        </details>
        <details>
        <summary class="sum3">
           Build doesn't work even though you followed all the build steps
        </summary>
        <p>
           You must make sure that your utils folder is upto date. Hence 
           we will have to cd into the utils folder and do a 
           <code>git pull origin master</code>
        </p>
        </details>
        <details>
        <summary class="sum3">
            Cannot build website
        </summary> 
                <p>You must run that from the "main" DevOps directory, not your
    
                 team subdirectory. If you only have Python 2.7… time
                 to upgrade!</p>
        </details>
        </details>
        <p>
            Sources:
            <ol> 
            <li><a href="http://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/">OSXDAILY</a></li>
          </ol>
        </p>
            </div>
        </div>
    </body>
</html>